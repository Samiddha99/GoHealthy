# Generated by Django 3.2 on 2022-08-16 13:27

import Go_Healthy_App.models
import Go_Healthy_App.validators
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminEmails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Email', models.EmailField(max_length=100)),
                ('Purpose', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=300), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='BedNo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Bed_No', models.CharField(blank=True, max_length=5, null=True)),
                ('Floor', models.CharField(blank=True, choices=[('Ground Floor', 'Ground Floor'), ('1st Floor', '1st Floor'), ('2nd Floor', '2nd Floor'), ('3rd Floor', '3rd Floor'), ('4th Floor', '4th Floor'), ('5th Floor', '5th Floor'), ('6th Floor', '6th Floor'), ('7th Floor', '7th Floor')], max_length=50, null=True)),
                ('Ward', models.CharField(choices=[('Female Ward', 'Female Ward'), ('Male Ward', 'Male Ward'), ('Child Ward', 'Child Ward'), ('ICU', 'ICU'), ('PICU', 'PICU'), ('NICU', 'NICU')], max_length=100)),
                ('Availability', models.CharField(choices=[('Available', 'Available'), ('Used', 'Used'), ('Book', 'Book'), ('Not Available', 'Not Available'), ('Reserved', 'Reserved'), ('Null', 'Null')], default='Available', max_length=50)),
                ('Support', models.CharField(choices=[('With Oxygen', 'With Oxygen'), ('Non-Oxygen', 'Non-Oxygen'), ('With Ventilator', 'With Ventilator'), ('Non-Ventilator', 'Non-Ventilator')], max_length=100)),
                ('Booking_Id', models.CharField(blank=True, max_length=30, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Bed',
                'verbose_name_plural': 'Beds',
                'ordering': ['Hospital', 'Department', 'Ward', 'Support', 'Room', 'Unit', 'Building', 'Floor', 'Bed_No'],
            },
        ),
        migrations.CreateModel(
            name='BedRemoveRequests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Status', models.CharField(choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Approved (Removed)', 'Approved (Removed)')], default='Pending', max_length=100)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('status_change_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Bed Remove Request ',
                'verbose_name_plural': 'Bed Remove Requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='Blood_Donar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100, validators=[Go_Healthy_App.validators.name_validation, Go_Healthy_App.validators.prefix_validation])),
                ('Gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('I not preferred to say', 'I not preferred to say')], max_length=30)),
                ('Blood_Group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('O+', 'O+'), ('O-', 'O-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('Hh (Bombay blood group)', 'Hh (Bombay blood group)')], max_length=50)),
                ('Date_of_Birth', models.DateField(validators=[Go_Healthy_App.validators.dob_validation])),
                ('Permanent_Address', models.TextField(max_length=500)),
                ('Permanent_City', models.CharField(max_length=200)),
                ('Permanent_Subdivision', models.CharField(max_length=100)),
                ('Permanent_Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Address', models.TextField(max_length=500)),
                ('City', models.CharField(max_length=200)),
                ('Subdivision', models.CharField(max_length=100)),
                ('Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Image', models.ImageField(upload_to=Go_Healthy_App.models.user_image_directory_path, validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Blood Donor',
                'verbose_name_plural': 'Blood Donors',
                'ordering': ['Name'],
            },
        ),
        migrations.CreateModel(
            name='BloodBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=500, validators=[Go_Healthy_App.validators.office_name_validation])),
                ('Unique_Id', models.CharField(db_index=True, default='0', max_length=7, unique=True)),
                ('Ownership', models.CharField(choices=[('State Government', 'State Government'), ('Semi State Government', 'Semi State Government'), ('Central Government', 'Central Government'), ('Semi Central Government', 'Semi Central Government'), ('Private', 'Private')], max_length=100)),
                ('Emergency_Number', models.CharField(db_index=True, max_length=15, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Toll_Free_Number', models.CharField(blank=True, db_index=True, max_length=15, null=True, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Helpline_Number', models.CharField(blank=True, db_index=True, max_length=15, null=True, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Contacts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=15, null=True, validators=[Go_Healthy_App.validators.contact_validation]), blank=True, null=True, size=None)),
                ('Address', models.TextField(max_length=500)),
                ('City', models.CharField(max_length=200)),
                ('Subdivision', models.CharField(max_length=100)),
                ('Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Blood_Availability', django.contrib.postgres.fields.hstore.HStoreField()),
                ('Website', models.URLField(blank=True, max_length=100, null=True)),
                ('Registration_Document', models.FileField(upload_to=Go_Healthy_App.models.registration_document_directory_path, validators=[Go_Healthy_App.validators.validate_document_file_type, Go_Healthy_App.validators.validate_file_size])),
                ('Latitude', models.FloatField()),
                ('Longitude', models.FloatField()),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Last_Changed', models.DateTimeField(auto_now=True)),
                ('Last_Update', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Blood Bank',
                'verbose_name_plural': 'Blood Banks',
                'ordering': ['State', 'District', 'Subdivision', 'Name'],
            },
        ),
        migrations.CreateModel(
            name='BloodDonationCamp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camp_id', models.CharField(default='0', max_length=30, unique=True)),
                ('Organizer', models.CharField(max_length=500, validators=[Go_Healthy_App.validators.office_name_validation])),
                ('Organizer_Contact', models.CharField(max_length=10, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Email', models.EmailField(max_length=100)),
                ('Organizer_Website', models.URLField(blank=True, max_length=500, null=True)),
                ('City', models.CharField(max_length=200)),
                ('Subdivision', models.CharField(max_length=200)),
                ('Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Landmark', models.CharField(max_length=500)),
                ('Start_Date', models.DateField()),
                ('End_Date', models.DateField(blank=True, null=True)),
                ('Start_Time', models.TimeField()),
                ('End_Time', models.TimeField()),
            ],
            options={
                'verbose_name': 'Blood Donation Camp',
                'verbose_name_plural': 'Blood Donation Camps',
                'ordering': ['-Start_Date'],
                'get_latest_by': ['-Start_Date', '-Start_Time'],
            },
        ),
        migrations.CreateModel(
            name='BloodDonationCollectionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Certificate_Id', models.CharField(db_index=True, default='0', max_length=20, unique=True)),
                ('Email', models.EmailField(blank=True, max_length=200, null=True)),
                ('Name', models.CharField(max_length=200)),
                ('Phone', models.CharField(max_length=10, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Blood_Group', models.CharField(max_length=50)),
                ('Unit', models.IntegerField()),
                ('Gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('I not preferred to say', 'I not preferred to say')], max_length=100)),
                ('Age', models.IntegerField()),
                ('Component', models.CharField(choices=[('Whole Blood', 'Whole Blood'), ('Plasma', 'Plasma'), ('Platelet', 'Platelet')], max_length=100)),
                ('Certificate_issued_for', models.CharField(choices=[('Blood Donation', 'Blood Donation'), ('Blood Collection', 'Blood Collection')], max_length=50)),
                ('Certificate', models.FileField(upload_to=Go_Healthy_App.models.certificate_directory_path, validators=[Go_Healthy_App.validators.validate_document_file_type])),
                ('Issued_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Blood Certificate',
                'verbose_name_plural': 'Blood Certificate',
                'ordering': ['-Issued_at'],
            },
        ),
        migrations.CreateModel(
            name='BloodRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Patient_Name', models.CharField(max_length=200)),
                ('Blood_Group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('O+', 'O+'), ('O-', 'O-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('Hh (Bombay blood group)', 'Hh (Bombay blood group)')], max_length=50)),
                ('Unit', models.PositiveIntegerField(default=1)),
                ('Contact', models.CharField(max_length=10, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Requested_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Blood Request',
                'verbose_name_plural': 'Blood Requests',
                'ordering': ['-Requested_at'],
                'get_latest_by': ['-Requested_at'],
            },
        ),
        migrations.CreateModel(
            name='CampReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Mobile', models.CharField(max_length=10, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Send_Before_in_minute', models.BigIntegerField(default=30)),
                ('reminder_sent', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Message', models.TextField(blank=True, default='na', max_length=10000, null=True)),
                ('Delivered', models.BooleanField(default=False)),
                ('Time', models.DateTimeField(auto_now_add=True)),
                ('Deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Chat',
                'verbose_name_plural': 'Chats',
                'ordering': ['Time'],
            },
        ),
        migrations.CreateModel(
            name='complaint',
            fields=[
                ('Complain_Id', models.CharField(db_index=True, max_length=7, primary_key=True, serialize=False, unique=True)),
                ('Name', models.CharField(max_length=100)),
                ('Email', models.EmailField(max_length=100)),
                ('Phone', models.CharField(max_length=10, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Address', models.TextField(max_length=500)),
                ('Subdivision', models.CharField(max_length=100)),
                ('City', models.CharField(max_length=100)),
                ('Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Language', models.CharField(choices=[('English', 'English'), ('Hindi', 'हिंदी'), ('Assamese', 'অসমীয়া'), ('Bengali', 'বাংলা'), ('Gujarati', 'ગુજરાતી'), ('Kannada', 'ಕನ್ನಡ'), ('Maithili', 'मैथिली'), ('Malayalam', 'മലയാളം'), ('Marathi', 'मराठी'), ('Nepali', 'नेपाली'), ('Odia', 'ଓଡ଼ିଆ'), ('Punjabi', 'ਪੰਜਾਬੀ'), ('Sanskrit', 'संस्कृत'), ('Santhali', 'ᱥᱟᱱᱛᱟᱲᱤ সাওঁতালী'), ('Sindhi', 'सिन्धी ਸਿੰਧੀ'), ('Tamil', 'தமிழ்'), ('Telugu', 'తెలుగు'), ('Urdu', 'اُردُو')], max_length=200)),
                ('Attachment', models.FileField(blank=True, help_text='If you have any document or proof regarding your complaint, then please attach it.', null=True, upload_to='documents/Attachments/Complaints', validators=[Go_Healthy_App.validators.validate_file_type, Go_Healthy_App.validators.validate_large_file_size])),
                ('Subject', models.CharField(max_length=200)),
                ('Complain', models.TextField(max_length=10000)),
                ('Status', models.CharField(choices=[('Pending', 'Pending'), ('Processing', 'Processing'), ('Resolved', 'Resolved')], default='Pending', max_length=50)),
                ('Complaint_Time', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Complaint',
                'verbose_name_plural': 'Complaints',
                'ordering': ['-Complaint_Time'],
                'get_latest_by': ['-Complaint_Time'],
            },
        ),
        migrations.CreateModel(
            name='ComplaintReplyAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Reply_Attachment', models.FileField(upload_to='documents/Attachments/Complaints/Replies', validators=[Go_Healthy_App.validators.validate_large_file_size, Go_Healthy_App.validators.validate_file_type])),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Complaint Reply Attachment',
                'verbose_name_plural': 'Complaint Reply Attachments',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ComplaintReplyReplies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Text', models.TextField(max_length=10000)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Complaint Reply',
                'verbose_name_plural': 'Complaint Replies',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=50)),
                ('Phone', models.CharField(max_length=10, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Email', models.EmailField(max_length=100)),
                ('Message', models.TextField(max_length=1000)),
                ('Contact_Time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Contact Us',
                'ordering': ['-Contact_Time'],
                'get_latest_by': ['-Contact_Time'],
            },
        ),
        migrations.CreateModel(
            name='CourseInstructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=300)),
                ('Image', models.ImageField(upload_to=Go_Healthy_App.models.user_image_directory_path, validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('Bio', models.TextField(max_length=50000)),
                ('Profession', models.CharField(blank=True, max_length=200, null=True)),
                ('Works_at', models.CharField(blank=True, max_length=1000, null=True)),
                ('facebook_username', models.CharField(blank=True, max_length=100, null=True)),
                ('twitter_username', models.CharField(blank=True, max_length=100, null=True)),
                ('linkedin_username', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Course Instructor',
                'verbose_name_plural': 'Courses Instructors',
            },
        ),
        migrations.CreateModel(
            name='CourseOfferer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=300)),
                ('Logo', models.ImageField(upload_to='images/Course Offerer Logo', validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('URL', models.URLField(max_length=1000)),
            ],
            options={
                'verbose_name': 'Course Offerer',
                'verbose_name_plural': 'Course Offereres',
            },
        ),
        migrations.CreateModel(
            name='Degrees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Degree', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Degree',
                'verbose_name_plural': 'Degrees',
                'ordering': ['Degree'],
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Disease', models.CharField(max_length=500, unique=True)),
            ],
            options={
                'verbose_name': 'Disease',
                'verbose_name_plural': 'Diseases',
                'ordering': ['Disease'],
            },
        ),
        migrations.CreateModel(
            name='Districts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=200, verbose_name='District Name')),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'ordering': ['state', 'Name'],
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100, validators=[Go_Healthy_App.validators.name_validation, Go_Healthy_App.validators.prefix_validation])),
                ('Gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('I not preferred to say', 'I not preferred to say')], max_length=30)),
                ('Blood_Group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('O+', 'O+'), ('O-', 'O-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('Hh (Bombay blood group)', 'Hh (Bombay blood group)')], max_length=50)),
                ('Permanent_Address', models.TextField(max_length=500)),
                ('Permanent_City', models.CharField(max_length=200)),
                ('Permanent_Subdivision', models.CharField(max_length=100)),
                ('Permanent_Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Address', models.TextField(max_length=500)),
                ('City', models.CharField(max_length=200)),
                ('Subdivision', models.CharField(max_length=100)),
                ('Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Image', models.ImageField(upload_to=Go_Healthy_App.models.user_image_directory_path, validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
                ('Pending_Upgradation', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
                'ordering': ['Name'],
            },
        ),
        migrations.CreateModel(
            name='DoctorRatingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Rate', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Doctor Rating Record',
                'verbose_name_plural': 'Doctor Rating Records',
                'ordering': ['Doctor_ID'],
                'get_latest_by': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Emergency_Number',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Office', models.CharField(max_length=200, validators=[Go_Healthy_App.validators.office_name_validation])),
                ('Title', models.CharField(blank=True, choices=[('Mr', 'Mr'), ('Mrs', 'Mrs'), ('Ms', 'Ms')], max_length=10, null=True)),
                ('Person', models.CharField(blank=True, max_length=200, null=True, validators=[Go_Healthy_App.validators.name_validation, Go_Healthy_App.validators.prefix_validation])),
                ('Person_Designation', models.CharField(blank=True, max_length=200, null=True)),
                ('Subdivision', models.CharField(max_length=200)),
                ('Contact', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15, validators=[Go_Healthy_App.validators.contact_validation]), size=None)),
            ],
            options={
                'verbose_name': 'Emergency Number',
                'verbose_name_plural': 'Emergency Numbers',
                'ordering': ['State', 'District', 'Subdivision', 'Office'],
            },
        ),
        migrations.CreateModel(
            name='FirstAidCourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Progress', models.FloatField(default=0.0)),
                ('Enrolled_Date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'First Aid Course Enrollment',
                'verbose_name_plural': 'First Aid Course Enrollments',
            },
        ),
        migrations.CreateModel(
            name='FirstaidPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SL_No', models.IntegerField()),
                ('Name', models.CharField(max_length=200)),
                ('Upload_Photo', models.ImageField(upload_to='images/Course/First Aid/Course_Contents', validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_large_file_size])),
                ('Description', models.TextField(blank=True, max_length=10000, null=True)),
                ('Hide_Photo', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'First Aid Photo',
                'verbose_name_plural': 'First Aid Photos',
                'ordering': ['Course', 'SL_No', 'Name'],
            },
        ),
        migrations.CreateModel(
            name='FirstaidPhotoCourse',
            fields=[
                ('Course_Id', models.CharField(max_length=7, primary_key=True, serialize=False, unique=True)),
                ('Name', models.CharField(max_length=300)),
                ('Description', models.TextField(max_length=10000)),
                ('What_Learn', models.TextField(max_length=99999)),
                ('Level', models.CharField(choices=[('All Levels', 'All Levels'), ('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Expert', 'Expert')], max_length=100)),
                ('Photo', models.ImageField(upload_to='images/Course/First Aid/Course_Banners', validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('slug', models.SlugField(blank=True, max_length=400, null=True)),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
                ('Hide_Course', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Course of First Aid Photo',
                'verbose_name_plural': 'Courses of First Aid Photo',
                'ordering': ['Name', 'Language'],
            },
        ),
        migrations.CreateModel(
            name='FirstaidVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SL_No', models.IntegerField()),
                ('Name', models.CharField(max_length=200)),
                ('Video', models.FileField(max_length=500, upload_to='videos/Course/First Aid/Course_Contents', validators=[Go_Healthy_App.validators.validate_video_type])),
                ('Hide_Video', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'First Aid Video',
                'verbose_name_plural': 'First Aid Videos',
                'ordering': ['Course', 'Section', 'SL_No', 'Name'],
            },
        ),
        migrations.CreateModel(
            name='FirstaidVideoCourse',
            fields=[
                ('Course_Id', models.CharField(max_length=7, primary_key=True, serialize=False, unique=True)),
                ('Name', models.CharField(max_length=300)),
                ('Description', models.TextField(max_length=10000)),
                ('What_Learn', models.TextField(max_length=99999)),
                ('Level', models.CharField(choices=[('All Levels', 'All Levels'), ('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Expert', 'Expert')], max_length=100)),
                ('Photo', models.ImageField(upload_to='images/Course/First Aid/Course_Banners', validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('slug', models.SlugField(blank=True, max_length=400, null=True)),
                ('Created', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
                ('Hide_Course', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Course of First Aid Video',
                'verbose_name_plural': 'Courses of First Aid Video',
                'ordering': ['Name', 'Language'],
            },
        ),
        migrations.CreateModel(
            name='FirstaidVideoSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SL_No', models.IntegerField()),
                ('Name', models.CharField(max_length=1000)),
            ],
            options={
                'verbose_name': 'Section for First Aid Video',
                'verbose_name_plural': 'Sections for First Aid Video',
                'ordering': ['SL_No', 'Name'],
            },
        ),
        migrations.CreateModel(
            name='FirstAidVideoSubtitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Subtitle_File', models.FileField(max_length=500, upload_to='subtitles/Course/First Aid/Video_Subtitles', validators=[Go_Healthy_App.validators.validate_subtitle_file])),
            ],
            options={
                'verbose_name': 'First Aid Video Subtitle',
                'verbose_name_plural': 'First Aid Videos Subtitles',
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Auth_Key', models.CharField(db_index=True, default='0', max_length=40, unique=True)),
                ('Name', models.CharField(max_length=500, validators=[Go_Healthy_App.validators.office_name_validation])),
                ('Unique_Id', models.CharField(db_index=True, default='0', max_length=7, unique=True)),
                ('Emergency_Number', models.CharField(db_index=True, max_length=15, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Toll_Free_Number', models.CharField(blank=True, db_index=True, max_length=15, null=True, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Helpline_Number', models.CharField(blank=True, db_index=True, max_length=15, null=True, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Contacts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=15, null=True, validators=[Go_Healthy_App.validators.contact_validation]), blank=True, null=True, size=None)),
                ('Type', models.CharField(choices=[('Primary Hospital', 'Primary Hospital'), ('Subdivision Hospital', 'Subdivision Hospital'), ('District Hospital', 'District Hospital'), ('Medical College', 'Medical College'), ('Specialised Hospital', 'Specialised Hospital'), ('Super Speciality', 'Super Speciality'), ('Community Health Centre', 'Community Health Centre'), ('Nursing Home', 'Nursing Home'), ('Other', 'Other')], max_length=100)),
                ('Ownership', models.CharField(choices=[('State Government', 'State Government'), ('Semi State Government', 'Semi State Government'), ('Central Government', 'Central Government'), ('Semi Central Government', 'Semi Central Government'), ('Private', 'Private')], max_length=100)),
                ('Address', models.TextField(max_length=500)),
                ('City', models.CharField(max_length=200)),
                ('Subdivision', models.CharField(max_length=100)),
                ('Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Image', models.ImageField(upload_to=Go_Healthy_App.models.user_image_directory_path, validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('Website', models.URLField(blank=True, max_length=100, null=True)),
                ('Registration_Document', models.FileField(upload_to=Go_Healthy_App.models.registration_document_directory_path, validators=[Go_Healthy_App.validators.validate_document_file_type, Go_Healthy_App.validators.validate_file_size])),
                ('Has_Antivenom', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=10)),
                ('Oxygen_Remaining_Time', models.IntegerField(default=0)),
                ('Latitude', models.FloatField()),
                ('Longitude', models.FloatField()),
                ('Last_Update', models.DateTimeField(auto_now=True)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Hospital',
                'verbose_name_plural': 'Hospitals',
                'ordering': ['Name'],
            },
        ),
        migrations.CreateModel(
            name='HospitalBuilding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Building', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': "Hospital's Building",
                'verbose_name_plural': "Hospital's Buildings",
                'ordering': ['Hospital', 'Building'],
            },
        ),
        migrations.CreateModel(
            name='HospitalDepartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Hospital Department',
                'verbose_name_plural': 'Hospital Departments',
                'ordering': ['department'],
            },
        ),
        migrations.CreateModel(
            name='HospitalRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Room', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': "Hospital's Room",
                'verbose_name_plural': "Hospital's Rooms",
                'ordering': ['Hospital', 'Room'],
            },
        ),
        migrations.CreateModel(
            name='HospitalUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Unit', models.CharField(max_length=300)),
            ],
            options={
                'verbose_name': "Hospital's Unit",
                'verbose_name_plural': "Hospital's Units",
                'ordering': ['Hospital', 'Unit'],
            },
        ),
        migrations.CreateModel(
            name='Languages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Language', models.CharField(max_length=200, unique=True)),
                ('Local_Script', models.CharField(max_length=1000)),
                ('place_at_top', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
                'ordering': ['-place_at_top', 'Language'],
            },
        ),
        migrations.CreateModel(
            name='NormalUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100, validators=[Go_Healthy_App.validators.name_validation, Go_Healthy_App.validators.prefix_validation])),
                ('Gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('I not preferred to say', 'I not preferred to say')], max_length=30)),
                ('Permanent_Address', models.TextField(max_length=500)),
                ('Permanent_City', models.CharField(max_length=200)),
                ('Permanent_Subdivision', models.CharField(max_length=100)),
                ('Permanent_Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Address', models.TextField(max_length=500)),
                ('City', models.CharField(max_length=200)),
                ('Subdivision', models.CharField(max_length=100)),
                ('Pin', models.CharField(max_length=6, validators=[Go_Healthy_App.validators.only_numeric])),
                ('Image', models.ImageField(upload_to=Go_Healthy_App.models.user_image_directory_path, validators=[Go_Healthy_App.validators.validate_image_type, Go_Healthy_App.validators.validate_file_size])),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Normal User',
                'verbose_name_plural': 'Normal Users',
            },
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('MobileOTP', models.CharField(blank=True, max_length=6, null=True)),
                ('EmailOTP', models.CharField(blank=True, max_length=6, null=True)),
                ('Mobile', models.CharField(blank=True, max_length=10, null=True)),
                ('Email', models.EmailField(blank=True, max_length=100, null=True)),
                ('Send_For', models.CharField(choices=[('Registration', 'Registration'), ('Blood Request', 'Blood Request'), ('Profile Edit', 'Profile Edit'), ('Blood Donation Camp Registration', 'Blood Donation Camp Registration'), ('Blood Donation Camp Edit', 'Blood Donation Camp Edit'), ('Hospital Register User Verification', 'BHospital Register User Verification'), ('Blood Bank Register User Verification', 'Blood Bank Register User Verification')], max_length=100)),
                ('Is_Verified', models.BooleanField(default=False)),
                ('expire', models.CharField(default='limited_time', max_length=30)),
                ('Added_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'OTP',
                'verbose_name_plural': 'OTPs',
            },
        ),
        migrations.CreateModel(
            name='PatientData',
            fields=[
                ('Booking_ID', models.CharField(db_index=True, max_length=30, primary_key=True, serialize=False, unique=True)),
                ('Booked_By', models.CharField(choices=[('User', 'User'), ('Hospital Authority', 'Hospital Authority')], default='User', max_length=50)),
                ('Patient_Name', models.CharField(max_length=100, validators=[Go_Healthy_App.validators.name_validation])),
                ('Email', models.EmailField(blank=True, max_length=100, null=True)),
                ('Mobile', models.CharField(max_length=10)),
                ('Alternative_Mobile', models.CharField(blank=True, max_length=10, null=True, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Age', models.CharField(max_length=20)),
                ('Subdivision', models.CharField(max_length=100)),
                ('State', models.CharField(max_length=500)),
                ('District', models.CharField(max_length=500)),
                ('Pin', models.CharField(max_length=20)),
                ('Gender', models.CharField(max_length=20)),
                ('Booking_Time', models.DateTimeField(auto_now_add=True)),
                ('Expire_Time', models.DateTimeField(default=django.utils.timezone.now)),
                ('Admit_Time', models.DateTimeField(default=django.utils.timezone.now)),
                ('Status_Changed_At', models.DateTimeField(default=django.utils.timezone.now)),
                ('Status', models.CharField(choices=[('Not Admit Still Now', 'Not Admit Still Now'), ("Don't Need to Admit", "Don't Need to Admit"), ('Admitted', 'Admitted'), ('Released', 'Released'), ('Referred', 'Referred'), ('Died', 'Died'), ('Expired', 'Expired')], default='Not Admit Still Now', max_length=50)),
                ('QR', models.ImageField(upload_to='images/Bed_Book_QR/', validators=[Go_Healthy_App.validators.validate_image_type])),
                ('Is_Unknown', models.BooleanField(default=False)),
                ('Is_Checked', models.BooleanField(default=False)),
                ('When_Checked', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Patient Data',
                'verbose_name_plural': 'Patient Data',
                'ordering': ['-Booking_Time'],
                'get_latest_by': ['-Booking_Time'],
            },
        ),
        migrations.CreateModel(
            name='PatientShiftRecords',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shifted_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Patient Shift Record',
                'verbose_name_plural': 'Patient Shift Records',
                'ordering': ['-shifted_at'],
                'get_latest_by': ['-shifted_at'],
            },
        ),
        migrations.CreateModel(
            name='PeopleVoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Text', models.CharField(max_length=5000)),
                ('Is_Approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'People Voice',
                'verbose_name_plural': 'People Voices',
                'ordering': ['-created_at'],
                'get_latest_by': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReferredPatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_action_took', models.BooleanField(default=True)),
                ('Admit_Time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('ReferredDate', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Referred Patient',
                'verbose_name_plural': 'Referred Patients',
                'ordering': ['-ReferredDate'],
                'get_latest_by': ['-ReferredDate'],
            },
        ),
        migrations.CreateModel(
            name='ResetPasswordCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Code', models.CharField(db_index=True, max_length=100, unique=True)),
                ('Added_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Reset Password Code',
                'verbose_name_plural': 'Reset Password Codes',
            },
        ),
        migrations.CreateModel(
            name='SiteAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100, validators=[Go_Healthy_App.validators.name_validation])),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Last_Update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Administrator',
                'verbose_name_plural': 'Administrators',
            },
        ),
        migrations.CreateModel(
            name='SiteContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Contact_Number', models.CharField(max_length=15, unique=True, validators=[Go_Healthy_App.validators.contact_validation])),
                ('Contact_For', models.CharField(max_length=100)),
                ('is_24x7', models.BooleanField(default=False)),
                ('is_main', models.BooleanField(default=False)),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Site Contact',
                'verbose_name_plural': 'Site Contacts',
                'ordering': ['is_main', 'added'],
            },
        ),
        migrations.CreateModel(
            name='SiteEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('EmailId', models.EmailField(max_length=200, unique=True)),
                ('Mail_For', models.CharField(max_length=100)),
                ('is_main', models.BooleanField(default=False)),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Site Email',
                'verbose_name_plural': 'Site Emails',
                'ordering': ['is_main', 'added'],
            },
        ),
        migrations.CreateModel(
            name='SomeCommonDisease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Disease', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'Some Common Disease',
                'verbose_name_plural': 'Some Common Diseases',
                'ordering': ['Disease'],
            },
        ),
        migrations.CreateModel(
            name='Specialities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Speciality', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'Speciality',
                'verbose_name_plural': 'Specialities',
                'ordering': ['Degree', 'Speciality'],
            },
        ),
        migrations.CreateModel(
            name='States',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=200, unique=True, verbose_name='State Name')),
                ('Is_Union_Territory', models.BooleanField(default=False, verbose_name='Is Union Territory')),
            ],
            options={
                'verbose_name_plural': 'States',
                'ordering': ['Is_Union_Territory', 'Name'],
            },
        ),
        migrations.CreateModel(
            name='TotalVisitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Total', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Total Visitor',
                'verbose_name_plural': 'Total Visitor',
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Email', models.EmailField(max_length=100)),
                ('Feedback', models.TextField(max_length=1000)),
                ('Added_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'User Feedback',
                'verbose_name_plural': 'User Feedbacks',
                'ordering': ['-Added_at'],
                'get_latest_by': ['-Added_at'],
            },
        ),
        migrations.CreateModel(
            name='WhatsappNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Whatsapp_Number', models.CharField(max_length=15, validators=[Go_Healthy_App.validators.contact_validation])),
            ],
            options={
                'verbose_name': 'WhatsApp Number',
                'verbose_name_plural': 'WhatsApp Numbers',
            },
        ),
        migrations.CreateModel(
            name='WorkingHour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Monday', models.CharField(max_length=100)),
                ('Tuesday', models.CharField(max_length=100)),
                ('Wednesday', models.CharField(max_length=100)),
                ('Thursday', models.CharField(max_length=100)),
                ('Friday', models.CharField(max_length=100)),
                ('Saturday', models.CharField(max_length=100)),
                ('Sunday', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(db_index=True, max_length=15, unique=True)),
                ('email', models.EmailField(db_index=True, max_length=100, unique=True)),
                ('User_Type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=300), size=None, validators=[Go_Healthy_App.validators.check_user_type])),
                ('Contact', models.CharField(db_index=True, max_length=10, unique=True, validators=[Go_Healthy_App.validators.contact_validation])),
                ('ID_Type', models.CharField(blank=True, choices=[('Aadhaar', 'Aadhaar'), ('Voter Card', 'Voter Card'), ('PAN', 'PAN'), ("Doctor's Registration", "Doctor's Registration"), ("Hospital's Registration", "Hospital's Registration"), ("Blood Bank's Registration", "Blood Bank's Registration")], max_length=100, null=True)),
                ('ID_Number', models.CharField(blank=True, max_length=100, null=True)),
                ('display_profile_pic', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_book_allow', models.BooleanField(default=True)),
                ('is_online', models.BooleanField(default=False)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('Is_in_Upgradation', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('last_login_details', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Registered', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.AddIndex(
            model_name='states',
            index=models.Index(fields=['Name', 'Is_Union_Territory'], name='state_index'),
        ),
        migrations.AddField(
            model_name='specialities',
            name='Degree',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Go_Healthy_App.degrees'),
        ),
        migrations.AddField(
            model_name='somecommondisease',
            name='Concerned_Department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='common_disease_departments', related_query_name='common_disease_department', to='Go_Healthy_App.hospitaldepartment'),
        ),
        migrations.AddField(
            model_name='siteadmin',
            name='Username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_admins', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='resetpasswordcode',
            name='Username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='referredpatient',
            name='Bed',
            field=models.ForeignKey(blank=True, max_length=100, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='bed_referredpatients', related_query_name='bed_referredpatient', to='Go_Healthy_App.bedno'),
        ),
        migrations.AddField(
            model_name='referredpatient',
            name='Patient',
            field=models.ForeignKey(blank=True, max_length=100, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_referredpatients', related_query_name='patient_referredpatient', to='Go_Healthy_App.patientdata'),
        ),
        migrations.AddField(
            model_name='referredpatient',
            name='Referral_Hospital_From',
            field=models.ForeignKey(blank=True, max_length=500, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital_from_referredpatients', related_query_name='hospital_from_referredpatient', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='referredpatient',
            name='Referral_Hospital_To',
            field=models.ForeignKey(blank=True, max_length=500, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital_to_referredpatients', related_query_name='hospital_to_referredpatient', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='peoplevoice',
            name='Language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.languages'),
        ),
        migrations.AddField(
            model_name='peoplevoice',
            name='hospital',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='patientshiftrecords',
            name='hospital',
            field=models.ForeignKey(blank=True, max_length=500, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital_patient_shifts', related_query_name='hospital_patient_shift', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='patientshiftrecords',
            name='patient',
            field=models.ForeignKey(max_length=100, on_delete=django.db.models.deletion.CASCADE, related_name='shift_patients', related_query_name='shift_patient', to='Go_Healthy_App.patientdata'),
        ),
        migrations.AddField(
            model_name='patientshiftrecords',
            name='shift_form',
            field=models.ForeignKey(blank=True, max_length=100, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='patient_shift_from_beds', related_query_name='patient_shift_from_bed', to='Go_Healthy_App.bedno'),
        ),
        migrations.AddField(
            model_name='patientshiftrecords',
            name='shift_to',
            field=models.ForeignKey(blank=True, max_length=100, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='patient_shift_to_beds', related_query_name='patient_shift_to_bed', to='Go_Healthy_App.bedno'),
        ),
        migrations.AddField(
            model_name='patientdata',
            name='Bed_No',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bed_patientsData', related_query_name='bed_patientData', to='Go_Healthy_App.bedno'),
        ),
        migrations.AddField(
            model_name='patientdata',
            name='Disease',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='disease_patientsData', related_query_name='disease_patientData', to='Go_Healthy_App.disease'),
        ),
        migrations.AddField(
            model_name='patientdata',
            name='Hospital_Name',
            field=models.ForeignKey(max_length=500, on_delete=django.db.models.deletion.CASCADE, related_name='hospital_patientsData', related_query_name='hospital_patientData', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='patientdata',
            name='Username',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_bedbooks', related_query_name='user_bedbook', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='otp',
            unique_together={('Mobile', 'Send_For'), ('Mobile', 'MobileOTP'), ('Email', 'EmailOTP'), ('Email', 'Send_For')},
        ),
        migrations.AddField(
            model_name='normaluser',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='current_district_normalusers', to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='normaluser',
            name='Permanent_District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='permanent_district_normalusers', to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='normaluser',
            name='Permanent_State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='permanent_state_normalusers', related_query_name='permanent_state_normaluser', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='normaluser',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='current_state_normalusers', related_query_name='current_state_normaluser', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='normaluser',
            name='Username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_normalusers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='hospitalunit',
            name='Hospital',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospital_units', related_query_name='hospital_unit', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='hospitalroom',
            name='Hospital',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospital_rooms', related_query_name='hospital_room', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='hospitalbuilding',
            name='Hospital',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospital_buildings', related_query_name='hospital_building', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='hospital',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='hospital',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='state_hospitals', related_query_name='state_hospital', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='hospital',
            name='Username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_hospitals', related_query_name='user_hospital', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='firstaidvideosubtitle',
            name='Subtitle_Language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.languages'),
        ),
        migrations.AddField(
            model_name='firstaidvideosubtitle',
            name='video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_firstaid_video_subtitles', related_query_name='video_firstaid_video_subtitle', to='Go_Healthy_App.firstaidvideo'),
        ),
        migrations.AddField(
            model_name='firstaidvideosection',
            name='Course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_firstaid_video_sections', related_query_name='course_firstaid_video_section', to='Go_Healthy_App.firstaidvideocourse'),
        ),
        migrations.AddField(
            model_name='firstaidvideocourse',
            name='Instructor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instructor_firstaid_video_courses', related_query_name='instructor_firstaid_video_course', to='Go_Healthy_App.courseinstructor'),
        ),
        migrations.AddField(
            model_name='firstaidvideocourse',
            name='Language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.languages'),
        ),
        migrations.AddField(
            model_name='firstaidvideocourse',
            name='Offered_By',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offered_by_firstaid_video_courses', related_query_name='offered_by_firstaid_video_course', to='Go_Healthy_App.courseofferer'),
        ),
        migrations.AddField(
            model_name='firstaidvideo',
            name='Course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_firstaid_videos', related_query_name='course_firstaid_video', to='Go_Healthy_App.firstaidvideocourse'),
        ),
        migrations.AddField(
            model_name='firstaidvideo',
            name='Section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_firstaid_videos', related_query_name='section_firstaid_video', to='Go_Healthy_App.firstaidvideosection'),
        ),
        migrations.AddField(
            model_name='firstaidphotocourse',
            name='Language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.languages'),
        ),
        migrations.AddField(
            model_name='firstaidphoto',
            name='Course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_firstaid_photos', related_query_name='course_firstaid_photo', to='Go_Healthy_App.firstaidphotocourse'),
        ),
        migrations.AddField(
            model_name='firstaidcourseenrollment',
            name='First_Aid_Photo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photo_first_aid_course_enrollments', related_query_name='photo_first_aid_course_enrollment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='firstaidcourseenrollment',
            name='First_Aid_Video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_first_aid_course_enrollments', related_query_name='video_first_aid_course_enrollment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='firstaidcourseenrollment',
            name='Username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_first_aid_course_enrollments', related_query_name='user_first_aid_course_enrollment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='emergency_number',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='emergency_number',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='state_emergencies', related_query_name='state_emergency', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='doctorratingrecord',
            name='Doctor_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_ratings', related_query_name='doctor_rating', to='Go_Healthy_App.doctor'),
        ),
        migrations.AddField(
            model_name='doctorratingrecord',
            name='Person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='doctor',
            name='Degree',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.degrees'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='current_district_doctors', to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='Permanent_District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='permanent_district_doctors', to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='Permanent_State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='permanent_state_doctors', related_query_name='permanent_state_doctor', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='Special',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.specialities'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='current_states_doctors', related_query_name='current_states_doctor', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='Username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_doctors', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='districts',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='state_districts', related_query_name='state_district', to='Go_Healthy_App.states', verbose_name='State'),
        ),
        migrations.AddIndex(
            model_name='degrees',
            index=models.Index(fields=['Degree'], name='degree_index'),
        ),
        migrations.AddField(
            model_name='courseinstructor',
            name='username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_course_instructors', related_query_name='user_course_instructors', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='complaintreplyreplies',
            name='Attachments',
            field=models.ManyToManyField(blank=True, to='Go_Healthy_App.ComplaintReplyAttachment'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='Replies',
            field=models.ManyToManyField(blank=True, to='Go_Healthy_App.ComplaintReplyReplies'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='state_complaints', related_query_name='state_complaint', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='chat',
            name='From',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='from_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chat',
            name='To',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='to_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='campreminder',
            name='Camp',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='camp_reminders', related_query_name='camp_reminder', to='Go_Healthy_App.blooddonationcamp'),
        ),
        migrations.AddField(
            model_name='campreminder',
            name='Username',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_reminders', related_query_name='user_reminder', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bloodrequest',
            name='Admit_Hospital',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='bloodrequest',
            name='Username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='blooddonationcollectionrecord',
            name='Blood_Bank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.bloodbank'),
        ),
        migrations.AddField(
            model_name='blooddonationcollectionrecord',
            name='Username',
            field=models.ManyToManyField(blank=True, related_name='user_bloodcertificates', related_query_name='user_bloodcertificate', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='blooddonationcamp',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='blooddonationcamp',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='state_blooddonationcamps', related_query_name='state_blooddonationcamp', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='bloodbank',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='bloodbank',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='state_bloodbanks', related_query_name='state_bloodbank', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='bloodbank',
            name='Username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_bloodbanks', related_query_name='user_bloodbank', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='blood_donar',
            name='District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='current_district_blooddonors', to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='blood_donar',
            name='Permanent_District',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='permanent_district_blood_donors', to='Go_Healthy_App.districts'),
        ),
        migrations.AddField(
            model_name='blood_donar',
            name='Permanent_State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='permanent_state_blood_donors', related_query_name='permanent_state_blood_donor', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='blood_donar',
            name='State',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='current_state_blooddonors', related_query_name='current_state_blooddonor', to='Go_Healthy_App.states'),
        ),
        migrations.AddField(
            model_name='blood_donar',
            name='Username',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_blooddonors', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bedremoverequests',
            name='Bed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Go_Healthy_App.bedno'),
        ),
        migrations.AddField(
            model_name='bedno',
            name='Book_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bedno',
            name='Building',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hospital_buildings', related_query_name='hospital_building', to='Go_Healthy_App.hospitalbuilding'),
        ),
        migrations.AddField(
            model_name='bedno',
            name='Department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='department_beds', related_query_name='department_bed', to='Go_Healthy_App.hospitaldepartment'),
        ),
        migrations.AddField(
            model_name='bedno',
            name='Hospital',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospital_beds', related_query_name='hospital_bed', to='Go_Healthy_App.hospital'),
        ),
        migrations.AddField(
            model_name='bedno',
            name='Room',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hospital_rooms', related_query_name='hospital_room', to='Go_Healthy_App.hospitalroom'),
        ),
        migrations.AddField(
            model_name='bedno',
            name='Unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hospital_units', related_query_name='hospital_unit', to='Go_Healthy_App.hospitalunit'),
        ),
        migrations.AddIndex(
            model_name='users',
            index=models.Index(fields=['username', 'email', 'Contact', 'User_Type', 'is_verified', 'is_active', 'is_book_allow'], name='user_index'),
        ),
        migrations.AddIndex(
            model_name='specialities',
            index=models.Index(fields=['Degree', 'Speciality'], name='speciality_index'),
        ),
        migrations.AlterUniqueTogether(
            name='specialities',
            unique_together={('Degree', 'Speciality')},
        ),
        migrations.AddIndex(
            model_name='siteadmin',
            index=models.Index(fields=['Username', 'Name'], name='admin_index'),
        ),
        migrations.AddIndex(
            model_name='referredpatient',
            index=models.Index(fields=['Referral_Hospital_From', 'Referral_Hospital_To', 'Patient', 'Bed'], include=('Referral_Hospital_From', 'Referral_Hospital_To', 'Patient', 'Bed'), name='referred_patient_index'),
        ),
        migrations.AddIndex(
            model_name='patientshiftrecords',
            index=models.Index(fields=['patient', 'shift_form', 'shift_to', 'hospital'], include=('patient', 'shift_form', 'shift_to', 'hospital'), name='patient_shift_index'),
        ),
        migrations.AddIndex(
            model_name='patientdata',
            index=models.Index(fields=['Booking_ID', 'Username', 'Hospital_Name', 'Bed_No', 'Status'], include=('Booking_Time', 'Expire_Time', 'Admit_Time', 'Status_Changed_At'), name='bed_book_index'),
        ),
        migrations.AddIndex(
            model_name='normaluser',
            index=models.Index(fields=['Username', 'Name'], include=('Gender', 'Address', 'State', 'City', 'Subdivision', 'District', 'Pin', 'Image'), name='normal_user_index'),
        ),
        migrations.AlterUniqueTogether(
            name='hospitalunit',
            unique_together={('Hospital', 'Unit')},
        ),
        migrations.AlterUniqueTogether(
            name='hospitalroom',
            unique_together={('Hospital', 'Room')},
        ),
        migrations.AlterUniqueTogether(
            name='hospitalbuilding',
            unique_together={('Hospital', 'Building')},
        ),
        migrations.AddIndex(
            model_name='hospital',
            index=models.Index(fields=['Username', 'Auth_Key', 'Unique_Id', 'Name'], include=('Type', 'Address', 'State', 'City', 'Subdivision', 'District', 'Pin', 'Image', 'Has_Antivenom', 'Oxygen_Remaining_Time', 'Latitude', 'Longitude'), name='hospital_index'),
        ),
        migrations.AlterUniqueTogether(
            name='firstaidvideosubtitle',
            unique_together={('video', 'Subtitle_Language')},
        ),
        migrations.AlterUniqueTogether(
            name='firstaidvideosection',
            unique_together={('Course', 'SL_No')},
        ),
        migrations.AlterUniqueTogether(
            name='firstaidvideo',
            unique_together={('Course', 'SL_No')},
        ),
        migrations.AlterUniqueTogether(
            name='firstaidphoto',
            unique_together={('Course', 'SL_No')},
        ),
        migrations.AddIndex(
            model_name='doctorratingrecord',
            index=models.Index(fields=['Doctor_ID', 'Rate', 'Person'], name='doctor_rating_index'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['Username', 'Name'], include=('Degree', 'Special', 'Gender', 'Address', 'State', 'City', 'Subdivision', 'District', 'Pin', 'Image'), name='doctor_index'),
        ),
        migrations.AddIndex(
            model_name='districts',
            index=models.Index(fields=['Name', 'state'], name='district_index'),
        ),
        migrations.AlterUniqueTogether(
            name='districts',
            unique_together={('Name', 'state')},
        ),
        migrations.AddIndex(
            model_name='bloodrequest',
            index=models.Index(fields=['Blood_Group', 'Admit_Hospital', 'Username'], include=('Patient_Name', 'Contact'), name='blood_request_index'),
        ),
        migrations.AddIndex(
            model_name='blooddonationcamp',
            index=models.Index(fields=['State', 'City', 'Subdivision', 'District', 'Pin'], include=('Organizer', 'Organizer_Contact'), name='donation_camp_index'),
        ),
        migrations.AddIndex(
            model_name='bloodbank',
            index=models.Index(fields=['Username', 'Name', 'Unique_Id'], include=('Ownership', 'Address', 'State', 'City', 'Subdivision', 'District', 'Pin', 'Latitude', 'Longitude'), name='blood_bank_index'),
        ),
        migrations.AddIndex(
            model_name='blood_donar',
            index=models.Index(fields=['Username', 'Name'], include=('Gender', 'Blood_Group', 'Address', 'State', 'City', 'Subdivision', 'District', 'Pin', 'Image'), name='blood_donor_index'),
        ),
        migrations.AddIndex(
            model_name='bedno',
            index=models.Index(fields=['Hospital', 'Department', 'Bed_No', 'Floor', 'Room', 'Ward', 'Building', 'Availability', 'Support', 'Last_Update'], include=('Book_by', 'Booking_Id'), name='bed_no_index'),
        ),
        migrations.AlterUniqueTogether(
            name='bedno',
            unique_together={('Hospital', 'Department', 'Bed_No', 'Floor', 'Ward', 'Room', 'Unit', 'Building', 'Support')},
        ),
    ]
